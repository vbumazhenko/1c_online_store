
#Область ПрограммныйИнтерфейс

#Область ОтправкаДанных

Функция ПараметрыУзлаОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	OS_ОбменСИнтернетМагазином.Ссылка КАК УзелОбмена,
	|	OS_ОбменСИнтернетМагазином.ИспользоватьОбменСИнтернетМагазином КАК ИспользоватьОбмен,
	|	OS_ОбменСИнтернетМагазином.СтрокаПодключения,
	|	OS_ОбменСИнтернетМагазином.КлючДоступа,
	|	OS_ОбменСИнтернетМагазином.ГруппаДоступаПартнера,
	|	OS_ОбменСИнтернетМагазином.Организация,
	|	OS_ОбменСИнтернетМагазином.Склад,
	|	OS_ОбменСИнтернетМагазином.Соглашение,
	|	OS_ОбменСИнтернетМагазином.Соглашение.Валюта КАК Валюта,
	|	OS_ОбменСИнтернетМагазином.Соглашение.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	OS_ОбменСИнтернетМагазином.Соглашение.ПорядокРасчетов КАК ПорядокРасчетов
	|ИЗ
	|	ПланОбмена.OS_ОбменСИнтернетМагазином КАК OS_ОбменСИнтернетМагазином
	|ГДЕ
	|	НЕ OS_ОбменСИнтернетМагазином.ПометкаУдаления
	|	И
	|	НЕ OS_ОбменСИнтернетМагазином.ЭтотУзел";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		СтруктураВозврата = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
	Иначе
		СтруктураВозврата = СтруктураВозврата = Новый Структура("УзелОбмена, ИспользоватьОбмен", Неопределено, Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗарегистрироватьИзменениеОбъекта(Источник) Экспорт
	
	ПараметрыУзла = ПараметрыУзлаОбмена();
	Если Не ПараметрыУзла.ИспользоватьОбмен Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыУзла.УзелОбмена, Источник.Ссылка);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		ТабНоменклатура = Источник.Выгрузить();
		ТабНоменклатура.Свернуть("Номенклатура");
		Для каждого ТекСтрока Из ТабНоменклатура Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыУзла.УзелОбмена, ТекСтрока.Номенклатура);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") Тогда
		
		ТабЗаказы = Источник.Выгрузить();
		ТабЗаказы.Свернуть("Заказ");
		Для каждого ТекСтрока Из ТабЗаказы Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыУзла.УзелОбмена, ТекСтрока.Заказ);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.СвободныеОстатки") Тогда
		
		ТабНоменклатура = Источник.Выгрузить();
		ТабНоменклатура.Свернуть("Номенклатура");
		Для каждого ТекСтрока Из ТабНоменклатура Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыУзла.УзелОбмена, ТекСтрока.Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбмен() Экспорт
	
	ПараметрыУзла = ПараметрыУзлаОбмена();
	Если Не ПараметрыУзла.ИспользоватьОбмен Тогда
		Возврат;
	КонецЕсли;
	
	ПодключениеДоступно = Ложь;
	ПроверитьПодключение(ПодключениеДоступно, ПараметрыУзла);
	
	Если Не ПодключениеДоступно Тогда
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			ПараметрыУзла.УзелОбмена.Метаданные(),
			ПараметрыУзла.УзелОбмена,
			ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
		
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	Изменения = ПолучитьИзменения(ПараметрыУзла.УзелОбмена);
	
	Если Изменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	HttpСоединение = ПолучитьСоединение(ПараметрыУзла);
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыУзла.СтрокаПодключения);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Access-Key", ПараметрыУзла.КлючДоступа);
	
	Для каждого Изменение Из Изменения Цикл
		
		HttpЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере + "/" + Изменение.Метод, Заголовки);
		HttpЗапрос.УстановитьТелоИзСтроки(Изменение.Содержание);
		
		Попытка
			HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);
			ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку("UTF-8");
		Исключение
			
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			
			Продолжить;
			
		КонецПопытки;
		
		Если ВРег(ТелоОтвета) = "OK" Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыУзла.УзелОбмена, 1);
		Иначе
			ОписаниеОшибки = ТелоОтвета;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьПодключение(ПодключениеДоступно, ПараметрыУзла) Экспорт
	
	ПодключениеДоступно = Ложь;
	
	HttpСоединение = ПолучитьСоединение(ПараметрыУзла);
	
	Если HttpСоединение <> Неопределено Тогда
	
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Access-Key", ПараметрыУзла.КлючДоступа);
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыУзла.СтрокаПодключения);	
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере + "/test", Заголовки);	
		
		Попытка
			
			HttpОтвет = HttpСоединение.Получить(HTTPЗапрос);
			ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку("UTF-8");
			
			Если ТелоОтвета = "OK" Тогда
				ПодключениеДоступно = Истина;
			Иначе
				ВызватьИсключение ТелоОтвета;
			КонецЕсли;
			
		Исключение
			
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

Процедура ОбработатьЗапрос_Покупатели(Запрос, Отказ, ОписаниеОшибки) Экспорт
	
	ПараметрыУзла = ПараметрыУзлаОбмена();
	Если Не ПараметрыУзла.ИспользоватьОбмен Тогда
		ОписаниеОшибки = НСтр("ru = 'Не настроен обмен данными с интернет-магазином'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());
	Попытка
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка чтения JSON. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			ПараметрыУзла.УзелОбмена.Метаданные(),
			ПараметрыУзла.УзелОбмена,
			ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
		Отказ = Истина;
		Возврат;
				
	КонецПопытки;
	
	Идентификаторы = Новый Массив;
	Для каждого ТекСтрока Из ДанныеОтвета.content Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Email) Тогда
			Идентификаторы.Добавить(ТекСтрока.Email);
		Иначе
			
			ОписаниеОшибки = "Не заполнен Email покупателя. Идентификация невозможна";
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты_КИ.АдресЭП КАК АдресЭП,
	|	Контрагенты_КИ.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК Контрагенты_КИ
	|ГДЕ
	|	НЕ Контрагенты_КИ.Ссылка.ПометкаУдаления
	|	И Контрагенты_КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И Контрагенты_КИ.АдресЭП В(&Идентификаторы)";
	
	ТаблицаКонтрагенты = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Для каждого ТекСтрока Из ДанныеОтвета.content Цикл
		
		ТекСтрока.Вставить("Ссылка");
		
		НайденныеСтроки = ТаблицаКонтрагенты.НайтиСтроки(Новый Структура("АдресЭП", ТекСтрока.Email));
		Если НайденныеСтроки.Количество() Тогда
			ТекСтрока.Ссылка = НайденныеСтроки[0].Контрагент;
		КонецЕсли;
		
		ЗаписатьКонтрагента(ТекСтрока, ПараметрыУзла, Отказ, ОписаниеОшибки);
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбработатьЗапрос_Заказы(Запрос, Отказ, ОписаниеОшибки) Экспорт
	
	ПараметрыУзла = ПараметрыУзлаОбмена();
	Если Не ПараметрыУзла.ИспользоватьОбмен Тогда
		ОписаниеОшибки = НСтр("ru = 'Не настроен обмен данными с интернет-магазином'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());
	СвойстваДата = Новый Массив;
	СвойстваДата.Добавить("orderDt");
	
	Попытка
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON,, Новый ФиксированныйМассив(СвойстваДата));
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка чтения JSON. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			ПараметрыУзла.УзелОбмена.Метаданные(),
			ПараметрыУзла.УзелОбмена,
			ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
		Отказ = Истина;
		Возврат;
				
	КонецПопытки;
	
	Идентификаторы = Новый ТаблицаЗначений;
	Идентификаторы.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Идентификаторы.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Для каждого ТекСтрока Из ДанныеОтвета.content Цикл
		Если ЗначениеЗаполнено(ТекСтрока.orderNm)
				И ЗначениеЗаполнено(ТекСтрока.orderDt) Тогда
			НоваяСтрока = Идентификаторы.Добавить();
			НоваяСтрока.Номер = ТекСтрока.orderNm;
			НоваяСтрока.Дата = ТекСтрока.orderDt;
		Иначе
			
			ОписаниеОшибки = "Не заполнены номер/дата заказа. Идентификация невозможна";
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Дата КАК Дата,
	|	Идентификаторы.Номер КАК Номер
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	&Идентификаторы КАК Идентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Дата КАК Дата,
	|	ВТ_Заказы.Номер КАК Номер,
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ВТ_Заказы.Дата = ЗаказКлиента.ДатаПоДаннымКлиента
	|			И ВТ_Заказы.Номер = ЗаказКлиента.НомерПоДаннымКлиента
	|			И (НЕ ЗаказКлиента.ПометкаУдаления)";
	
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока Из ДанныеОтвета.content Цикл
		
		ТекСтрока.Вставить("Ссылка");
		
		СтруктураПоиска = Новый Структура("Номер, Дата", ТекСтрока.orderNm, ТекСтрока.orderDt);
		НайденныеСтроки = ТаблицаЗаказы.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			ТекСтрока.Ссылка = НайденныеСтроки[0].Ссылка;
		КонецЕсли;
		
		ЗаписатьЗаказ(ТекСтрока, ПараметрыУзла, Отказ, ОписаниеОшибки);
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбработатьЗапрос_Статусы(Запрос, Отказ, ОписаниеОшибки) Экспорт

	ПараметрыУзла = ПараметрыУзлаОбмена();
	Если Не ПараметрыУзла.ИспользоватьОбмен Тогда
		ОписаниеОшибки = НСтр("ru = 'Не настроен обмен данными с интернет-магазином'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());
	СвойстваДата = Новый Массив;
	СвойстваДата.Добавить("orderDt");
	
	Попытка
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON,, Новый ФиксированныйМассив(СвойстваДата));
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка чтения JSON. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			ПараметрыУзла.УзелОбмена.Метаданные(),
			ПараметрыУзла.УзелОбмена,
			ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
		Отказ = Истина;
		Возврат;
				
	КонецПопытки;
	
	ТаблицаЗаказы = Новый ТаблицаЗначений;
	ТаблицаЗаказы.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаЗаказы.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаЗаказы.Колонки.Добавить("НовоеСостояние",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗаказовКлиентов"));
	
	Для каждого ТекСтрока Из ДанныеОтвета.content Цикл
		Если ЗначениеЗаполнено(ТекСтрока.orderNm)
				И ЗначениеЗаполнено(ТекСтрока.orderDt) Тогда
			НоваяСтрока = ТаблицаЗаказы.Добавить();
			НоваяСтрока.Номер = ТекСтрока.orderNm;
			НоваяСтрока.Дата = ТекСтрока.orderDt;
			НоваяСтрока.НовоеСостояние =
				XMLЗначение(Тип("ПеречислениеСсылка.СостоянияЗаказовКлиентов"), ТекСтрока.status);
		Иначе
			
			ОписаниеОшибки = "Не заполнены номер/дата заказа. Идентификация невозможна";
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗаказы", ТаблицаЗаказы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗаказы.Дата КАК Дата,
	|	ТаблицаЗаказы.Номер КАК Номер,
	|	ТаблицаЗаказы.НовоеСостояние КАК НовоеСостояние
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	&ТаблицаЗаказы КАК ТаблицаЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Заказ,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
	|	ВТ_Заказы.НовоеСостояние КАК НовоеСостояние
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|			ПО ЗаказКлиента.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|		ПО ВТ_Заказы.Дата = ЗаказКлиента.ДатаПоДаннымКлиента
	|			И ВТ_Заказы.Номер = ЗаказКлиента.НомерПоДаннымКлиента
	|			И (НЕ ЗаказКлиента.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Состояние <> Выборка.НовоеСостояние Тогда
			Запись = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьМенеджерЗаписи();
			Запись.Заказ = Выборка.Заказ;
			Запись.Состояние = Выборка.Состояние;
			Запись.ДатаСобытия = ТекущаяДата();
			Запись.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ПолучитьИзменения(УзелОбмена)
	
	ПланыОбмена.ВыбратьИзменения(УзелОбмена, 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Товары"" КАК ТипОбъекта,
	|	НоменклатураИзменения.Ссылка
	|ПОМЕСТИТЬ ВТ_Изменения
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|ГДЕ
	|	НоменклатураИзменения.Узел = &УзелОбмена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Заказы"" КАК ТипОбъекта,
	|	ЗаказКлиентаИзменения.Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента.Изменения КАК ЗаказКлиентаИзменения
	|ГДЕ
	|	ЗаказКлиентаИзменения.Узел = &УзелОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Изменения.ТипОбъекта КАК ТипОбъекта,
	|	ВТ_Изменения.Ссылка
	|ИЗ
	|	ВТ_Изменения КАК ВТ_Изменения
	|ИТОГИ
	|ПО
	|	ТипОбъекта";
	
	ВыборкаТипОбъекта = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Новый Массив;
	
	Пока ВыборкаТипОбъекта.Следующий() Цикл
		
		МассивОбъектов = Новый Массив;
		Выборка = ВыборкаТипОбъекта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			МассивОбъектов.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		СтруктураИзменений = Новый Структура("Метод, Содержание");
		
		Если ВыборкаТипОбъекта.ТипОбъекта = "Товары" Тогда
			СтруктураИзменений.Метод = "goods";
			СтруктураИзменений.Содержание = ПолучитьСообщениеОбмена_Товары(МассивОбъектов);
		ИначеЕсли ВыборкаТипОбъекта.ТипОбъекта = "Заказы" Тогда
			СтруктураИзменений.Метод = "status";
			СтруктураИзменений.Содержание = ПолучитьСообщениеОбмена_Заказы(МассивОбъектов);
		КонецЕсли;
		
		Результат.Добавить(СтруктураИзменений);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоединение(ПараметрыУзла)
	
	Возврат OS_ОбменСИнтернетМагазиномПовтИсп.ПолучитьСоединение(ПараметрыУзла);
	
КонецФункции

Функция ПолучитьСообщениеОбмена_Товары(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СпрНоменклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (&МассивОбъектов)) КАК СвободныеОстаткиОстатки
	|		ПО СпрНоменклатура.Ссылка = СвободныеОстаткиОстатки.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены.Идентификатор КАК ВидЦеныИдентификатор,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены.Наименование КАК ВидЦеныНаименование,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&МассивОбъектов)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТаблицаЦен = Результаты[1].Выгрузить();
	
	Выборка = Результаты[0].Выбрать();
	
	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("content", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		
		content = Новый Структура;
		content.Вставить("article", СокрЛП(Выборка.Артикул));
		content.Вставить("name", СокрЛП(Выборка.Наименование));
		content.Вставить("unit", Новый Структура);
		content.unit.Вставить("id", СокрЛП(Выборка.ЕдиницаИзмеренияКод));
		content.unit.Вставить("name", СокрЛП(Выборка.ЕдиницаИзмеренияНаименование));
		content.Вставить("picture", "");	//TODO: Добавить код получения картинки
		content.Вставить("count", Выборка.Остаток);
		content.Вставить("prices", Новый Массив);
		
		ЦеныНоменклатуры = ТаблицаЦен.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для каждого ТекСтрока Из ЦеныНоменклатуры Цикл
			prices = Новый Структура;
			prices.Вставить("type", Новый Структура);
			prices.type.Вставить("id", СокрЛП(ТекСтрока.ВидЦеныИдентификатор));
			prices.type.Вставить("name", СокрЛП(ТекСтрока.ВидЦеныНаименование));
			prices.Вставить("price",ТекСтрока.Цена);
			content.prices.Добавить(prices);
		КонецЦикла;
		
		СтруктураJSON.content.Добавить(content);
		
	КонецЦикла;
	
	Возврат JSON(СтруктураJSON);
	
КонецФункции

Функция ПолучитьСообщениеОбмена_Заказы(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.НомерПоДаннымКлиента КАК Номер,
	|	ЗаказКлиента.ДатаПоДаннымКлиента КАК Дата,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО СостоянияЗаказовКлиентов.Заказ = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивОбъектов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("content", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		
		content = Новый Структура;
		content.Вставить("orderNm", СокрЛП(Выборка.Номер));
		content.Вставить("orderDt", Выборка.Дата);
		content.Вставить("status", XMLСтрока(Выборка.Состояние));
		
		СтруктураJSON.content.Добавить(content);
		
	КонецЦикла;
	
	Возврат JSON(СтруктураJSON);
	
КонецФункции

Процедура ОбновитьСвойствоОбъекта(Объект, ИмяРеквизита, Значение, Записывать)
	
	Если Объект[ИмяРеквизита] <> Значение Тогда
		Записывать = Истина;
		Объект[ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

#Область ПреобразованиеОбъектов

Функция ПолучитьСтруктуруКонтрагента(СтруктураОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", СтруктураОбъекта.Email);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты_КИ.Ссылка КАК Контрагент,
	|	Контрагенты_КИ.Ссылка.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК Контрагенты_КИ
	|ГДЕ
	|	НЕ Контрагенты_КИ.Ссылка.ПометкаУдаления
	|	И Контрагенты_КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И Контрагенты_КИ.АдресЭП = &Идентификатор";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьКонтрагента(СтруктураОбъекта, ПараметрыУзла, Отказ, ОписаниеОшибки)
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Ссылка) Тогда
		
		Записывать = Ложь;
		Контрагент = СтруктураОбъекта.Ссылка.ПолучитьОбъект();
		Партнер = Контрагент.Партнер.ПолучитьОбъект();
		
	Иначе
		
		Записывать = Истина;
		
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Партнер.ДатаРегистрации = ТекущаяДатаСеанса();
		Партнер.Клиент = Истина;
		Партнер.Комментарий = "Загружено из Интернет-магазина";
		Партнер.ГруппаДоступа = ПараметрыУзла.ГруппаДоступаПартнера;
		//ПартнерСсылка = Справочники.Партнеры.ПолучитьСсылку();
		Партнер.УстановитьСсылкуНового(Справочники.Партнеры.ПолучитьСсылку());
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Партнер = Партнер.ПолучитьСсылкуНового();
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
		
		КИ = Контрагент.КонтактнаяИнформация.Добавить();
		КИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		КИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		КИ.ВидДляСписка = КИ.Вид; 
		КИ.АдресЭП = СтруктураОбъекта.email;
		КИ.Представление = СтруктураОбъекта.email;
		
	КонецЕсли;
	
	Наименование = СтруктураОбъекта.firstname + " " + СтруктураОбъекта.lastname;
	Если Контрагент.Наименование <> Наименование Тогда
		Записывать = Истина;
		Партнер.Наименование = Наименование;
		Партнер.НаименованиеПолное = Наименование;
		Контрагент.Наименование = Наименование;
		Контрагент.НаименованиеПолное = Наименование;
	КонецЕсли;
	
	НайденныеСтроки = Контрагент.КонтактнаяИнформация.НайтиСтроки(
		Новый Структура("Тип, Представление", Перечисления.ТипыКонтактнойИнформации.Телефон, СтруктураОбъекта.phone));
	Если Не НайденныеСтроки.Количество() Тогда
		Записывать = Истина;
		КИ = Контрагент.КонтактнаяИнформация.Добавить();
		КИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КИ.ВидДляСписка = КИ.Вид;
		КИ.Представление = СтруктураОбъекта.phone;
	КонецЕсли;
	
	Если Записывать Тогда
		
		Попытка
			Партнер.Записать();
			Контрагент.Записать();
		Исключение
			
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка записи элемента справочника Партнеры. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			Отказ = Истина;
				
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗаказ(СтруктураОбъекта, ПараметрыУзла, Отказ, ОписаниеОшибки)
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Ссылка) Тогда
		Записывать = Ложь;
		Объект = СтруктураОбъекта.Ссылка.ПолучитьОбъект();
	Иначе
		
		Записывать = Истина;
		Объект = Документы.ЗаказКлиента.СоздатьДокумент();
		Объект.Комментарий = "Загружено из Интернет-магазина";
		Объект.Дата = ТекущаяДата();
		Объект.Организация = ПараметрыУзла.Организация;
		Объект.Соглашение = ПараметрыУзла.Соглашение;
		Объект.Склад = ПараметрыУзла.Склад;
		Объект.Валюта = ПараметрыУзла.Валюта;
		Объект.ЦенаВключаетНДС = ПараметрыУзла.ЦенаВключаетНДС;
		Объект.НеОтгружатьЧастями = Истина;
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
		Объект.СкидкиРассчитаны = Истина;
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		Объект.НомерПоДаннымКлиента = СтруктураОбъекта.orderNm;
		Объект.ДатаПоДаннымКлиента = СтруктураОбъекта.orderDt;
		Объект.ПорядокРасчетов = ПараметрыУзла.ПорядокРасчетов;
		Объект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		Объект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Неопределено);
		Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		Объект.ДатаОтгрузки = Объект.Дата;
		
		// Менеджер = ?
		
	КонецЕсли;
	
	СтруктураКонтрагента = ПолучитьСтруктуруКонтрагента(СтруктураОбъекта.customer);
	Если СтруктураКонтрагента = Неопределено Тогда
		
		СтруктураОбъекта.customer.Вставить("Ссылка");
		ЗаписатьКонтрагента(СтруктураОбъекта.customer, ПараметрыУзла, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СтруктураКонтрагента = Новый Структура("Контрагент, Партнер");
		СтруктураКонтрагента.Контрагент = СтруктураОбъекта.customer.Ссылка;
		СтруктураКонтрагента.Партнер = СтруктураОбъекта.customer.Партнер;
		
	КонецЕсли;
	
	ОбновитьСвойствоОбъекта(Объект, "Контрагент", СтруктураКонтрагента.Контрагент, Записывать);
	ОбновитьСвойствоОбъекта(Объект, "Партнер", СтруктураКонтрагента.Партнер, Записывать);
	
	АдресДоставки = СтруктураОбъекта.address.postcode + ", "
		+ СтруктураОбъекта.address.region + ", "
		+ СтруктураОбъекта.address.city + ", "
		+ СтруктураОбъекта.address.address1 + ", "
		+ СтруктураОбъекта.address.address2;
		
	ОбновитьСвойствоОбъекта(Объект, "АдресДоставки", АдресДоставки, Записывать);
	
	ТаблицаТовары = Новый ТаблицаЗначений();
	ТаблицаТовары.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаТовары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого ТекСтрока Из СтруктураОбъекта.goods Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		НоваяСтрока.Артикул = ТекСтрока.article;
		НоваяСтрока.Количество = ТекСтрока.count;
		НоваяСтрока.Сумма = ТекСтрока.amount;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Артикул КАК Артикул,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.Количество КАК КоличествоУпаковок,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.Сумма КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Количество <> 0
	|			ТОГДА ВТ_Товары.Сумма / ВТ_Товары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) КАК ВариантОбеспечения
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_Товары.Артикул = Номенклатура.Артикул
	|			И (НЕ Номенклатура.ПометкаУдаления)";
	
	ТоварыЗагруженные = Запрос.Выполнить().Выгрузить();
	ТоварыЗаказа = Объект.Товары.Выгрузить();
	
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ТоварыЗагруженные, ТоварыЗаказа, "Номенклатура,Количество,Сумма") Тогда
		Записывать = Истина;
		Объект.Товары.Загрузить(ТоварыЗагруженные);
	КонецЕсли;
	
	Если Записывать Тогда
		
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка записи документа Заказ клиента. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с инетрнет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ПараметрыУзла.УзелОбмена.Метаданные(),
				ПараметрыУзла.УзелОбмена,
				ОписаниеОшибки + " " + НСтр("ru = 'Обмен отменен.'"));
			Отказ = Истина;
				
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область JSON

Функция unJSON(JSONСтрока) Экспорт
	
	Результат = "";
	
	Если Не ЗначениеЗаполнено(JSONСтрока) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураJSON = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	
	Попытка
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ЧтениеJSON.Закрыть();
	
	Результат = СтруктураJSON;
	Возврат Результат;
	
КонецФункции

Функция JSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Результат = ЗаписьJSON.Закрыть();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
